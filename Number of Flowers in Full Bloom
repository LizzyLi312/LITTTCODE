// solution 1: meeting rooms 
class Solution {
    final int START = 0;
    final int END = 2;
    final int PPL = 1;
    public int[] fullBloomFlowers(int[][] flowers, int[] people) {
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> (a[0] == b[0] ? a[1] - b[1] : a[0] - b[0])); // we put start time before end time if they're on the same time, bc end time is not the ending time
        for (int[] flower : flowers) {
            int st = flower[0], ed = flower[1];
            pq.offer(new int[]{st, 0});
            pq.offer(new int[]{ed, 2});
        }
        for (int i = 0; i < people.length; i++) {
            pq.offer(new int[]{people[i], 1, i});
        }

        int cnt = 0;
        int[] res = new int[people.length];
        while (!pq.isEmpty()) {
            int[] t = pq.poll();
            int type = t[1];
            if (type == START) cnt++;
            else if (type == END) cnt--;
            else if (type == PPL) res[t[2]] = cnt;
        }
        return res;
    }
}

// TreeMap
class Solution {
    public int[] fullBloomFlowers(int[][] flowers, int[] people) {
        TreeMap<Integer, Integer> map = new TreeMap<>();
        for (int[] flower : flowers) {
            int st = flower[0], ed = flower[1];
            map.put(flower[0], map.getOrDefault(flower[0], 0) + 1);
            map.put(flower[1] + 1, map.getOrDefault(flower[1] + 1, 0) - 1);
        }

        int cnt = 0;

        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            int day = entry.getKey();
            int flowerDiff = entry.getValue();
            cnt += flowerDiff;
            map.put(day, cnt);
        }

        int[] res = new int[people.length];

        for (int i = 0; i < people.length; i++) {
            Integer closestDay = map.floorKey(people[i]);
            res[i] = closestDay == null ? 0 : map.get(closestDay);
        }
        return res;
    }
}
/*
ceilingKey(K key)
Returns the least key greater than or equal to the given key, or null if there is no such key.
floorKey is verce versa 
Pay attention to the return type
*/

